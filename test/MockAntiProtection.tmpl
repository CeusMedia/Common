namespace <%namespace%>
{
	use CeusMedia\CommonTest\MockException;
	use CeusMedia\CommonTest\MockBadMethodCallException;
	use CeusMedia\CommonTest\MockBadVarCallException;
	use CeusMedia\CommonTest\MockBadStaticMethodCallException;
	use CeusMedia\CommonTest\MockBadStaticVarCallException;
	use ReflectionObject;

	class <%mockClassName%> extends <%originalClassName%>
	{
	    //  PUBLIC STATIC
		public static function executeProtectedStaticMethod( $method, $content, $comment = NULL )
		{
			if( !is_callable( self::$method ) )
				throw new MockBadStaticMethodCallException( 'Static method "'.$method.'" is not callable.' );
			return self::$method( $content, $comment );
		}

		public static function getProtectedStaticVar( string $varName )
		{
			if( isset( self::$$varName ) )
				throw new MockBadStaticVarCallException( 'Static variable "'.$varName.'" is not declared.' );
			return self::$$varName;
		}

		public static function setProtectedStaticVar( string $varName, $varValue )
		{
			if( !isset( self::$$varName ) )
				throw new MockBadStaticVarCallException( 'Static variable "'.$varName.'" is not declared.' );
			self::$$varName	= $varValue;
		}

	    //  PUBLIC
		public function executeProtectedMethod( $method, $content, $comment = NULL )
		{
			if( !method_exists( $this, $method ) )
				throw new MockBadMethodCallException( 'Method "'.$method.'" is not callable (in class "'.get_class( $this ).'").' );
			return $this->$method( $content, $comment );
		}

		public function getProtectedVar( $varName )
		{
			if( !in_array( $varName, self::getObjectProperties( $this ) ) )
				throw new MockBadVarCallException( 'Variable  "'.$varName.'" is not declared (in class "'.get_class( $this ).'").' );
			return $this->$varName;
		}

		public function setProtectedVar( string $varName, $varValue ): self
		{
			$reflection	= new ReflectionObject( $this );
			$properties	= [];
			foreach( $reflection->getProperties() as $property ){
				$properties[] = $property->getName();
			}

			if( !in_array( $varName, self::getObjectProperties( $this ) ) )
				throw new MockBadVarCallException( 'Variable "'.$varName.'" is not declared (in class "'.get_class( $this ).'").' );
			$this->$varName	= $varValue;
			return $this;
		}

        //  PROTECTED
		protected function getObjectProperties( object $object ): array
		{
			$reflection	= new ReflectionObject( $object );
			return array_map(static function( $property ){
			    return $property->getName();
			}, $reflection->getProperties() );
		}
	}
}
